/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Tomodachi API
 * API for managing hubs in the Tomodachi application.
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ErrorResponseResponse,
  GetHubsParams,
  HubListResponseResponse,
  SingleHubResponseResponse
} from '.././schemas';





/**
 * @summary Get all hubs
 */
export const getHubs = (
    params?: GetHubsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HubListResponseResponse>> => {
    
    
    return axios.default.get(
      `/hubs`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetHubsQueryKey = (params?: GetHubsParams,) => {
    return [`/hubs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHubsQueryOptions = <TData = Awaited<ReturnType<typeof getHubs>>, TError = AxiosError<ErrorResponseResponse>>(params?: GetHubsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHubs>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHubsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHubs>>> = ({ signal }) => getHubs(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHubs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHubsQueryResult = NonNullable<Awaited<ReturnType<typeof getHubs>>>
export type GetHubsQueryError = AxiosError<ErrorResponseResponse>


export function useGetHubs<TData = Awaited<ReturnType<typeof getHubs>>, TError = AxiosError<ErrorResponseResponse>>(
 params: undefined |  GetHubsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHubs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHubs>>,
          TError,
          Awaited<ReturnType<typeof getHubs>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHubs<TData = Awaited<ReturnType<typeof getHubs>>, TError = AxiosError<ErrorResponseResponse>>(
 params?: GetHubsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHubs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHubs>>,
          TError,
          Awaited<ReturnType<typeof getHubs>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHubs<TData = Awaited<ReturnType<typeof getHubs>>, TError = AxiosError<ErrorResponseResponse>>(
 params?: GetHubsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHubs>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all hubs
 */

export function useGetHubs<TData = Awaited<ReturnType<typeof getHubs>>, TError = AxiosError<ErrorResponseResponse>>(
 params?: GetHubsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHubs>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHubsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get hub by ID
 */
export const getHubById = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SingleHubResponseResponse>> => {
    
    
    return axios.default.get(
      `/hubs/${id}`,options
    );
  }


export const getGetHubByIdQueryKey = (id: number,) => {
    return [`/hubs/${id}`] as const;
    }

    
export const getGetHubByIdQueryOptions = <TData = Awaited<ReturnType<typeof getHubById>>, TError = AxiosError<ErrorResponseResponse>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHubById>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHubByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHubById>>> = ({ signal }) => getHubById(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHubById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHubByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHubById>>>
export type GetHubByIdQueryError = AxiosError<ErrorResponseResponse>


export function useGetHubById<TData = Awaited<ReturnType<typeof getHubById>>, TError = AxiosError<ErrorResponseResponse>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHubById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHubById>>,
          TError,
          Awaited<ReturnType<typeof getHubById>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHubById<TData = Awaited<ReturnType<typeof getHubById>>, TError = AxiosError<ErrorResponseResponse>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHubById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHubById>>,
          TError,
          Awaited<ReturnType<typeof getHubById>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHubById<TData = Awaited<ReturnType<typeof getHubById>>, TError = AxiosError<ErrorResponseResponse>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHubById>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get hub by ID
 */

export function useGetHubById<TData = Awaited<ReturnType<typeof getHubById>>, TError = AxiosError<ErrorResponseResponse>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHubById>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHubByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



